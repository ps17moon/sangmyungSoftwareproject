// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __rest } from "tslib";
import { getClient } from "@azure-rest/core-client";
import { logger } from "./logger.js";
/**
 * Initialize a new instance of `FaceClient`
 * @param endpointParam - Supported Cognitive Services endpoints (protocol and hostname, for example:
 * https://{resource-name}.cognitiveservices.azure.com).
 * @param credentials - uniquely identify client credential
 * @param options - the parameter for all optional parameters
 */
export default function createClient(endpointParam, credentials, _a = {}) {
    var _b, _c, _d, _e, _f, _g, _h, _j;
    var { apiVersion = "v1.2-preview.1" } = _a, options = __rest(_a, ["apiVersion"]);
    const endpointUrl = (_c = (_b = options.endpoint) !== null && _b !== void 0 ? _b : options.baseUrl) !== null && _c !== void 0 ? _c : `${endpointParam}/face/${apiVersion}`;
    const userAgentInfo = `azsdk-js-ai-vision-face-rest/1.0.0-beta.1`;
    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`
        : `${userAgentInfo}`;
    options = Object.assign(Object.assign({}, options), { userAgentOptions: {
            userAgentPrefix,
        }, loggingOptions: {
            logger: (_e = (_d = options.loggingOptions) === null || _d === void 0 ? void 0 : _d.logger) !== null && _e !== void 0 ? _e : logger.info,
        }, credentials: {
            scopes: (_g = (_f = options.credentials) === null || _f === void 0 ? void 0 : _f.scopes) !== null && _g !== void 0 ? _g : ["https://cognitiveservices.azure.com/.default"],
            apiKeyHeaderName: (_j = (_h = options.credentials) === null || _h === void 0 ? void 0 : _h.apiKeyHeaderName) !== null && _j !== void 0 ? _j : "Ocp-Apim-Subscription-Key",
        } });
    const client = getClient(endpointUrl, credentials, options);
    client.pipeline.removePolicy({ name: "ApiVersionPolicy" });
    client.pipeline.addPolicy({
        name: "VerifyImageFilenamePolicy",
        sendRequest: (request, next) => {
            var _a, _b;
            for (const part of (_b = (_a = request.multipartBody) === null || _a === void 0 ? void 0 : _a.parts) !== null && _b !== void 0 ? _b : []) {
                const contentDisposition = part.headers.get("content-disposition");
                if (contentDisposition &&
                    contentDisposition.includes(`name="VerifyImage"`) &&
                    !contentDisposition.includes("filename=")) {
                    part.headers.set("content-disposition", `form-data; name="VerifyImage"; filename="blob"`);
                }
            }
            return next(request);
        },
    });
    return client;
}
//# sourceMappingURL=faceClient.js.map