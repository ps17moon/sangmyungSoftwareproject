{"version":3,"file":"faceClient.js","sourceRoot":"","sources":["../../src/faceClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAsBlC,+BA8CC;;AAjED,yDAAoD;AACpD,2CAAqC;AAWrC;;;;;;GAMG;AACH,SAAwB,YAAY,CAClC,aAAqB,EACrB,WAA4C,EAC5C,KAAmE,EAAE;;QAArE,EAAE,UAAU,GAAG,gBAAgB,OAAsC,EAAjC,OAAO,sBAA3C,cAA6C,CAAF;IAE3C,MAAM,WAAW,GAAG,MAAA,MAAA,OAAO,CAAC,QAAQ,mCAAI,OAAO,CAAC,OAAO,mCAAI,GAAG,aAAa,SAAS,UAAU,EAAE,CAAC;IACjG,MAAM,aAAa,GAAG,2CAA2C,CAAC;IAClE,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;QAClE,CAAC,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,IAAI,aAAa,EAAE;QAChE,CAAC,CAAC,GAAG,aAAa,EAAE,CAAC;IACzB,OAAO,mCACF,OAAO,KACV,gBAAgB,EAAE;YAChB,eAAe;SAChB,EACD,cAAc,EAAE;YACd,MAAM,EAAE,MAAA,MAAA,OAAO,CAAC,cAAc,0CAAE,MAAM,mCAAI,kBAAM,CAAC,IAAI;SACtD,EACD,WAAW,EAAE;YACX,MAAM,EAAE,MAAA,MAAA,OAAO,CAAC,WAAW,0CAAE,MAAM,mCAAI,CAAC,8CAA8C,CAAC;YACvF,gBAAgB,EAAE,MAAA,MAAA,OAAO,CAAC,WAAW,0CAAE,gBAAgB,mCAAI,2BAA2B;SACvF,GACF,CAAC;IACF,MAAM,MAAM,GAAG,IAAA,uBAAS,EAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAe,CAAC;IAE1E,MAAM,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAE3D,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QACxB,IAAI,EAAE,2BAA2B;QACjC,WAAW,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;;YAC7B,KAAK,MAAM,IAAI,IAAI,MAAA,MAAA,OAAO,CAAC,aAAa,0CAAE,KAAK,mCAAI,EAAE,EAAE,CAAC;gBACtD,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;gBACnE,IACE,kBAAkB;oBAClB,kBAAkB,CAAC,QAAQ,CAAC,oBAAoB,CAAC;oBACjD,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,EACzC,CAAC;oBACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,gDAAgD,CAAC,CAAC;gBAC5F,CAAC;YACH,CAAC;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientOptions } from \"@azure-rest/core-client\";\nimport { getClient } from \"@azure-rest/core-client\";\nimport { logger } from \"./logger.js\";\nimport type { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport type { FaceClient } from \"./clientDefinitions.js\";\nimport type { Versions } from \"./models.js\";\n\n/** The optional parameters for the client */\nexport interface FaceClientOptions extends ClientOptions {\n  /** API Version */\n  apiVersion?: Versions;\n}\n\n/**\n * Initialize a new instance of `FaceClient`\n * @param endpointParam - Supported Cognitive Services endpoints (protocol and hostname, for example:\n * https://{resource-name}.cognitiveservices.azure.com).\n * @param credentials - uniquely identify client credential\n * @param options - the parameter for all optional parameters\n */\nexport default function createClient(\n  endpointParam: string,\n  credentials: TokenCredential | KeyCredential,\n  { apiVersion = \"v1.2-preview.1\", ...options }: FaceClientOptions = {},\n): FaceClient {\n  const endpointUrl = options.endpoint ?? options.baseUrl ?? `${endpointParam}/face/${apiVersion}`;\n  const userAgentInfo = `azsdk-js-ai-vision-face-rest/1.0.0-beta.1`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n    credentials: {\n      scopes: options.credentials?.scopes ?? [\"https://cognitiveservices.azure.com/.default\"],\n      apiKeyHeaderName: options.credentials?.apiKeyHeaderName ?? \"Ocp-Apim-Subscription-Key\",\n    },\n  };\n  const client = getClient(endpointUrl, credentials, options) as FaceClient;\n\n  client.pipeline.removePolicy({ name: \"ApiVersionPolicy\" });\n\n  client.pipeline.addPolicy({\n    name: \"VerifyImageFilenamePolicy\",\n    sendRequest: (request, next) => {\n      for (const part of request.multipartBody?.parts ?? []) {\n        const contentDisposition = part.headers.get(\"content-disposition\");\n        if (\n          contentDisposition &&\n          contentDisposition.includes(`name=\"VerifyImage\"`) &&\n          !contentDisposition.includes(\"filename=\")\n        ) {\n          part.headers.set(\"content-disposition\", `form-data; name=\"VerifyImage\"; filename=\"blob\"`);\n        }\n      }\n      return next(request);\n    },\n  });\n\n  return client;\n}\n"]}